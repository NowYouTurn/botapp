import logging, asyncio, time
from aiogram.types import Message, CallbackQuery
from app.keyboards.common import confirm_spend
from app.database import async_session_factory
from app.models import User

log = logging.getLogger(__name__)

#¬†–æ—á–∏—Å—Ç–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
_pending: dict[int, float] = {}
_TIMEOUT = 300  # 5¬†–º–∏–Ω—É—Ç


async def ensure_credit(event: Message | CallbackQuery, user: User) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å, –∑–∞–ø—Ä–æ—Å–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞ 1 —É—Å–ª—É–≥–∏,
    —Å–ø–∏—Å–∞—Ç—å –µ—ë –≤¬†–ë–î –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å False, –µ—Å–ª–∏ –æ–ø–ª–∞—Ç—É –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å.
    """
    chat_id = event.chat.id if isinstance(event, Message) else event.message.chat.id

    # –ø–µ—Ä–≤–∞—è –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è
    if not user.free_used:
        async with async_session_factory() as s:
            user.free_used = True
            await s.commit()
        return True

    # –±–∞–ª–∞–Ω—Å
    if user.credits <= 0:
        await event.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö —É—Å–ª—É–≥. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ —Å—á—ë—Ç üí≥")
        return False

    # —É–∂–µ —Å–ø—Ä–∞—à–∏–≤–∞–ª–∏ ‚Äì –∂–¥—ë–º –æ—Ç–≤–µ—Ç–∞ –≤¬†callback
    if chat_id in _pending and time.time() - _pending[chat_id] < _TIMEOUT:
        await event.answer("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–ø–∏—Å–∞–Ω–∏–µ —á–µ—Ä–µ–∑ –ø–æ—è–≤–∏–≤—à–∏–µ—Å—è –∫–Ω–æ–ø–∫–∏ üñ±")
        return False

    msg = await event.answer(
        f"‚ö†Ô∏è¬†–°–ø–∏—Å–∞—Ç—å 1¬†—É—Å–ª—É–≥—É? –£¬†–≤–∞—Å –æ—Å—Ç–∞–Ω–µ—Ç—Å—è {user.credits - 1}.",
        reply_markup=confirm_spend(),
    )
    _pending[chat_id] = time.time()

    try:
        cb: CallbackQuery = await event.bot.wait_for(
            CallbackQuery,
            timeout=_TIMEOUT,
            check=lambda c: c.message.id == msg.message_id and c.data.startswith("spend:"),
        )
    except asyncio.TimeoutError:
        await msg.edit_text("‚è± –í—Ä–µ–º—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ.")
        _pending.pop(chat_id, None)
        return False

    _pending.pop(chat_id, None)
    if cb.data.endswith("yes"):
        async with async_session_factory() as s:
            user.credits -= 1
            await s.commit()
        await cb.message.edit_text("‚úÖ¬†–£—Å–ª—É–≥–∞ —Å–ø–∏—Å–∞–Ω–∞.")
        return True

    await cb.message.edit_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    return False
