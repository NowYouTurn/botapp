from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardRemove
from app.utils.typing_action import with_typing
from apscheduler.triggers.cron import CronTrigger
from app.scheduler import scheduler
from app.utils.credits import ensure_credit
from app.models import User
import pendulum, re, logging

router = Router()
log = logging.getLogger(__name__)

@router.message(F.text == "üóì –ì–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ –¥–µ–Ω—å")
async def choose_time(message: Message):
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (HH:MM) –ø–æ –≤–∞—à–µ–º—É —á–∞—Å–æ–≤–æ–º—É –ø–æ—è—Å—É.")
    
@router.message(lambda m: re.fullmatch(r"\d{1,2}:\d{2}", m.text.strip()))
@with_typing
async def register_horo(message: Message, db_user: User):
    if not await ensure_credit(message, db_user): return
    hh, mm = map(int, message.text.split(":"))
    tz = db_user.timezone or "UTC"
    trigger = CronTrigger(hour=hh, minute=mm, timezone=tz)
    job_id = f"daily-{db_user.telegram_id}"
    scheduler.remove_job(job_id, silent=True)   # –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å, –µ—Å–ª–∏ –±—ã–ª
    scheduler.add_job("app.scheduler:_send_daily", trigger, args=[message.bot, db_user],
                      id=job_id, replace_existing=True)
    await message.answer(f"‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø –±—É–¥–µ—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≤ {hh:02d}:{mm:02d} {tz}.",
                         reply_markup=ReplyKeyboardRemove())
